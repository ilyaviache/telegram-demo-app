#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_NftCollection.headers.fc";
#include "tact_NftCollection.stdlib.fc";
#include "tact_NftCollection.constants.fc";
#include "tact_NftCollection.storage.fc";

;;
;; Contract NftCollection functions
;;

(cell, int, int, int, int, int, slice, tuple, cell) $NftCollection$_contract_init(slice $owner_address, cell $collection_content, (int, int, slice) $royalty_params) impure inline_ref {
    var (($royalty_params'numerator, $royalty_params'denominator, $royalty_params'destination)) = $royalty_params;
    var (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)) = (null(), 0, 1024, 45, 0, 1000000000, null(), null(), null());
    $self'owner_address = $owner_address;
    $self'collection_content = $collection_content;
    $self'royalty_params = $RoyaltyParams$_as_optional(($royalty_params'numerator, $royalty_params'denominator, $royalty_params'destination));
    return ($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content);
}

((cell, int, int, int, int, int, slice, tuple, cell), ()) $NftCollection$_fun_addIpfsHash((cell, int, int, int, int, int, slice, tuple, cell) $self, int $hash) impure inline_ref {
    var (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)) = $self;
    $self'ipfs_hashes~__tact_dict_set_int_int(257, $hash, true, 1);
    return (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content), ());
}

((cell, int, int, int, int, int, slice, tuple, cell), int) $NftCollection$_fun_ipfsHashExists((cell, int, int, int, int, int, slice, tuple, cell) $self, int $hash) impure inline_ref {
    var (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)) = $self;
    return (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content), (~ null?(__tact_dict_get_int_int($self'ipfs_hashes, 257, $hash, 1))));
}

((cell, int, int, int, int, int, slice, tuple, cell), ()) $NftCollection$_fun_clearIpfsHashes((cell, int, int, int, int, int, slice, tuple, cell) $self) impure inline_ref {
    var (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)) = $self;
    $self'ipfs_hashes = null();
    return (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content), ());
}

((cell, int, int, int, int, int, slice, tuple, cell), (cell, cell)) $NftCollection$_fun_getNftItemInit((cell, int, int, int, int, int, slice, tuple, cell) $self, int $item_index) impure inline_ref {
    var (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)) = $self;
    return (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content), $NftItem$_init_child(__tact_context_sys, my_address(), $item_index, $self'collection_content));
}

((cell, int, int, int, int, int, slice, tuple, cell), ()) $NftCollection$_fun_paidMint((cell, int, int, int, int, int, slice, tuple, cell) $self, slice $new_owner, int $msgValue, cell $item_content) impure inline_ref {
    var (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)) = $self;
    throw_unless(62742, ($self'next_item_index >= 0));
    cell $ipfsHashCell = $item_content;
    int $hashedIpfs = cell_hash($ipfsHashCell);
    throw_unless(27273, (~ ($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)~$NftCollection$_fun_ipfsHashExists($hashedIpfs)));
    int $nftMsgValue = ($msgValue - $self'mint_price);
    var ($nft_init'code, $nft_init'data) = ($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)~$NftCollection$_fun_getNftItemInit($self'next_item_index);
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body_code_data($global_contractAddress(($nft_init'code, $nft_init'data)), $nftMsgValue, false, 2, $Transfer$_store_cell($Transfer$_constructor_query_id_new_owner_response_destination_custom_payload_forward_amount_forward_payload(0, $new_owner, $self'owner_address, $item_content, 0, $global_emptySlice())), $nft_init'code, $nft_init'data));
    ($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)~$NftCollection$_fun_addIpfsHash($hashedIpfs);
    $self'next_item_index = ($self'next_item_index + 1);
    if (($self'next_item_index >= $self'max_items_supply)) {
        ($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)~$NftCollection$_fun_clearIpfsHashes();
    }
    return (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content), ());
}

((cell, int, int, int, int, int, slice, tuple, cell), (int, cell, slice)) $NftCollection$_fun_get_collection_data((cell, int, int, int, int, int, slice, tuple, cell) $self) impure inline_ref {
    var (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)) = $self;
    tuple $b = __tact_string_builder_start_string();
    slice $collectionDataString = __tact_slice_to_str($Cell$_fun_asSlice($self'collection_content));
    $b~__tact_string_builder_append($collectionDataString);
    $b~__tact_string_builder_append(__gen_slice_string_ad97708c3b1a27bbb662f81edd8be67001ed52b44cfeb0fa42f4736d47f397e4());
    return (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content), $CollectionData$_constructor_next_item_index_collection_content_owner_address($self'next_item_index, __tact_string_builder_end($b), $self'owner_address));
}

((cell, int, int, int, int, int, slice, tuple, cell), (int, int, int, int, int)) $NftCollection$_fun_get_minting_data((cell, int, int, int, int, int, slice, tuple, cell) $self) impure inline_ref {
    var (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)) = $self;
    return (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content), $MintingData$_constructor_next_item_index_max_items_supply_reserved_items_count_minted_reserved_items_mint_price($self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price));
}

((cell, int, int, int, int, int, slice, tuple, cell), slice) $NftCollection$_fun_get_nft_address_by_index((cell, int, int, int, int, int, slice, tuple, cell) $self, int $item_index) impure inline_ref {
    var (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)) = $self;
    var ($initCode'code, $initCode'data) = ($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)~$NftCollection$_fun_getNftItemInit($item_index);
    return (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content), $global_contractAddress(($initCode'code, $initCode'data)));
}

((cell, int, int, int, int, int, slice, tuple, cell), cell) $NftCollection$_fun_get_nft_content((cell, int, int, int, int, int, slice, tuple, cell) $self, int $index, cell $individual_content) impure inline_ref {
    var (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)) = $self;
    tuple $b = __tact_string_builder_start_string();
    slice $collectionDataString = __tact_slice_to_str($Cell$_fun_asSlice($self'collection_content));
    slice $itemIpfsDataHash = __tact_slice_to_str($Cell$_fun_asSlice($individual_content));
    $b~__tact_string_builder_append($collectionDataString);
    $b~__tact_string_builder_append($itemIpfsDataHash);
    return (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content), __tact_string_builder_end($b));
}

((cell, int, int, int, int, int, slice, tuple, cell), (int, int, slice)) $NftCollection$_fun_royalty_params((cell, int, int, int, int, int, slice, tuple, cell) $self) impure inline_ref {
    var (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)) = $self;
    return (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content), $RoyaltyParams$_not_null($self'royalty_params));
}

((cell, int, int, int, int, int, slice, tuple, cell), cell) $NftCollection$_fun_get_ipfs_hashes((cell, int, int, int, int, int, slice, tuple, cell) $self) impure inline_ref {
    var (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)) = $self;
    return (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content), $self'ipfs_hashes);
}

;;
;; Receivers of a Contract NftCollection
;;

((cell, int, int, int, int, int, slice, tuple, cell), ()) $NftCollection$_internal_text_844560c3e623a2c49343c6f6d7e593d10614de11d9acde82a784c138e1874cb9((cell, int, int, int, int, int, slice, tuple, cell) $self) impure inline {
    var ($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(50353, ( __tact_slice_eq_bits($self'owner_address, $ctx'sender) ));
    int $amount = (__tact_my_balance() - 20000000);
    if (($amount > 0)) {
        $global_send($SendParameters$_constructor_to_value_bounce_mode($self'owner_address, $amount, false, 2));
    }
    return (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content), ());
}

((cell, int, int, int, int, int, slice, tuple, cell), ()) $NftCollection$_internal_text_250b76e2b9576fc6b4c45129483006b0003a0c39b6f7ae413d177f4e3479dbca((cell, int, int, int, int, int, slice, tuple, cell) $self) impure inline {
    var ($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(50353, ( __tact_slice_eq_bits($self'owner_address, $ctx'sender) ));
    int $mintedNfts = $self'next_item_index;
    int $reserveAmount = ($mintedNfts * 20000000);
    $reserveAmount = ($reserveAmount + 20000000);
    int $withdrawableAmount = (__tact_my_balance() - $reserveAmount);
    if (($withdrawableAmount > 0)) {
        $global_send($SendParameters$_constructor_to_value_bounce_mode($self'owner_address, $withdrawableAmount, false, 2));
    }
    return (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content), ());
}

(((cell, int, int, int, int, int, slice, tuple, cell)), ()) $NftCollection$_internal_binary_MintParams((cell, int, int, int, int, int, slice, tuple, cell) $self, (cell, slice) $msg) impure inline {
    var ($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content) = $self;
    var ($msg'item_content, $msg'destination) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(12233, ( __tact_slice_eq_bits($self'owner_address, $ctx'sender) ));
    throw_unless(8700, ($self'minted_reserved_items < $self'reserved_items_count));
    int $msgValue = $ctx'value;
    int $tonBalanceBeforeMsg = (__tact_my_balance() - $msgValue);
    int $storageFee = (20000000 - min($tonBalanceBeforeMsg, 20000000));
    $msgValue = ($msgValue - ($storageFee + 20000000));
    ($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)~$NftCollection$_fun_paidMint($msg'destination, $msgValue, $msg'item_content);
    $self'minted_reserved_items = ($self'minted_reserved_items + 1);
    $global_emit($LogEventMintRecord$_store_cell($LogEventMintRecord$_constructor_minter_item_id_generate_number(__tact_context_get_sender(), $self'next_item_index, random())));
    return (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content), ());
}

(((cell, int, int, int, int, int, slice, tuple, cell)), ()) $NftCollection$_internal_binary_PaidMintParams((cell, int, int, int, int, int, slice, tuple, cell) $self, (cell, slice) $msg) impure inline {
    var ($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content) = $self;
    var ($msg'item_content, $msg'destination) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(1510, (($self'next_item_index - $self'minted_reserved_items) < ($self'max_items_supply - $self'reserved_items_count)));
    int $msgValue = $ctx'value;
    int $tonBalanceBeforeMsg = (__tact_my_balance() - $msgValue);
    int $storageFee = (20000000 - min($tonBalanceBeforeMsg, 20000000));
    $msgValue = ($msgValue - ($storageFee + 20000000));
    throw_unless(45169, ($msgValue >= $self'mint_price));
    ($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content)~$NftCollection$_fun_paidMint($msg'destination, $msgValue, $msg'item_content);
    $global_emit($LogEventMintRecord$_store_cell($LogEventMintRecord$_constructor_minter_item_id_generate_number(__tact_context_get_sender(), $self'next_item_index, random())));
    return (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content), ());
}

(((cell, int, int, int, int, int, slice, tuple, cell)), ()) $NftCollection$_internal_binary_GetRoyaltyParams((cell, int, int, int, int, int, slice, tuple, cell) $self, (int) $msg) impure inline {
    var ($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content) = $self;
    var ($msg'query_id) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($ctx'sender, 0, 64, false, $ReportRoyaltyParams$_store_cell($ReportRoyaltyParams$_constructor_query_id_numerator_denominator_destination($msg'query_id, $RoyaltyParams$_get_numerator($RoyaltyParams$_not_null($self'royalty_params)), $RoyaltyParams$_get_denominator($RoyaltyParams$_not_null($self'royalty_params)), $self'owner_address))));
    return (($self'ipfs_hashes, $self'next_item_index, $self'max_items_supply, $self'reserved_items_count, $self'minted_reserved_items, $self'mint_price, $self'owner_address, $self'royalty_params, $self'collection_content), ());
}

;;
;; Get methods of a Contract NftCollection
;;

_ %get_collection_data() method_id(102491) {
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_get_collection_data();
    return $CollectionData$_to_external(res);
}

_ %get_minting_data() method_id(90721) {
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_get_minting_data();
    return $MintingData$_to_external(res);
}

_ %get_nft_address_by_index(int $$item_index) method_id(92067) {
    int $item_index = $$item_index;
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_get_nft_address_by_index($item_index);
    return res;
}

_ %getNftItemInit(int $$item_index) method_id(81078) {
    int $item_index = $$item_index;
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_getNftItemInit($item_index);
    return $StateInit$_to_external(res);
}

_ %get_nft_content(int $$index, cell $$individual_content) method_id(68445) {
    int $index = $$index;
    cell $individual_content = $$individual_content;
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_get_nft_content($index, $individual_content);
    return res;
}

_ %royalty_params() method_id(85719) {
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_royalty_params();
    return $RoyaltyParams$_to_external(res);
}

_ %get_ipfs_hashes() method_id(74672) {
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_get_ipfs_hashes();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmNV2uGzbhrDWZYR1vvZKEtCDLyeQjRDwHcdNjjfHHcta6";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract NftCollection
;;

((cell, int, int, int, int, int, slice, tuple, cell), int) $NftCollection$_contract_router_internal((cell, int, int, int, int, int, slice, tuple, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive MintParams message
    if (op == 2723730381) {
        var msg = in_msg~$MintParams$_load();
        self~$NftCollection$_internal_binary_MintParams(msg);
        return (self, true);
    }
    
    ;; Receive PaidMintParams message
    if (op == 1408253530) {
        var msg = in_msg~$PaidMintParams$_load();
        self~$NftCollection$_internal_binary_PaidMintParams(msg);
        return (self, true);
    }
    
    ;; Receive GetRoyaltyParams message
    if (op == 1765620048) {
        var msg = in_msg~$GetRoyaltyParams$_load();
        self~$NftCollection$_internal_binary_GetRoyaltyParams(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "WithdrawMax" message
        if (text_op == 0x844560c3e623a2c49343c6f6d7e593d10614de11d9acde82a784c138e1874cb9) {
            self~$NftCollection$_internal_text_844560c3e623a2c49343c6f6d7e593d10614de11d9acde82a784c138e1874cb9();
            return (self, true);
        }
        
        ;; Receive "Withdraw" message
        if (text_op == 0x250b76e2b9576fc6b4c45129483006b0003a0c39b6f7ae413d177f4e3479dbca) {
            self~$NftCollection$_internal_text_250b76e2b9576fc6b4c45129483006b0003a0c39b6f7ae413d177f4e3479dbca();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $NftCollection$_contract_load();
    
    ;; Handle operation
    int handled = self~$NftCollection$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $NftCollection$_contract_store(self);
}
